package searchlight;

message FetchChunk {
    required string array_name   = 1;  // array name
    required uint32 attribute_id = 2;  // attribute
    required bool   confirm_only = 3;  // just confirm existence
    repeated int64  position     = 4 [packed=true];  // chunk coordinates
    required uint32 slot         = 5;  // requester's slot (must be returned in the response)
}

message VarAssignment {
    repeated int64  var_min   = 1 [packed=true]; // min value
    repeated int64  var_max   = 2 [packed=true]; // max value
}

message SearchlightSolution {
    required VarAssignment solution = 1; // Solution as an assignment
}

message SearchlightControl {
    // Type for info messages between nodes and the coordinator
    enum Type {
        SEARCH_IDLE         = 0; // Main solver has finished and is idle
        VALIDATOR_LOCAL_FIN = 1; // Validator finished its local work
        END_SEARCH          = 2; // Search ended on all nodes
        COMMIT              = 3; // Full stop; validators will cease working
    }

    required Type type      = 1; // Control message type
    repeated int32 instance = 2 [packed=true]; // Instance related to the message
}

message SearchlightBalance {
    // Type for info messages between nodes
    enum Type {
        HELPER_DISPATCH      = 1; // Giving a helper instance
        REJECT_HELPER_SOFT   = 2; // Rejecting help just given (soft reject)
        REJECT_HELPER_HARD   = 3; // Rejecting help just given (hard reject)
        ACCEPT_HELP          = 4; // Helper accepted
        HELP_LOAD            = 5; // Message contains load for the helper
        CANDIDATE_FORWARD    = 6; // Forwarding of a candidate to a validator
        BALANCE_RESULT       = 7; // Result of balancing (e.g., for forwarder candidates)
    }

    required Type type          = 1; // Type of the message
    repeated VarAssignment load = 2; // Load for the helper or validator
    optional int32 id           = 3; // Balancing id (for candidate or solver)
    repeated int32 instance     = 4 [packed=true]; // helper instance id
    optional bool result        = 5; // Result of the request (e.g., true if the validation succedeed)
}
